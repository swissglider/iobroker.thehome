{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Test for All Sensors on IOBroker with Tags etc",
  "editable": true,
  "gnetId": null,
  "graphTooltip": 2,
  "id": 1,
  "iteration": 1632933556201,
  "links": [],
  "panels": [
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic",
            "seriesBy": "last"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 2,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 13,
        "w": 8,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "maxPerRow": 3,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull",
            "min",
            "max",
            "mean"
          ],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.1.4",
      "repeat": "function",
      "repeatDirection": "h",
      "targets": [
        {
          "query": "data1 = from(bucket: \"iobroker\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n\ndata2 = from(bucket: \"iobroker_labels_per_stateID\")\n  |> range(start: -40y)\n  |> drop(columns: [\"_start\", \"_stop\", \"_time\", \"_value\", \"_field\"]) \n\ndata3 = join(\n  tables: {t1: data1, t2: data2},\n  on: [\"_measurement\"]\n)\n\ndata3\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"id\"] =~ /${id:regex}/ or \"all\" == \"${id}\")\n  |> filter(fn: (r) => r[\"name\"] =~ /${name:regex}/ or \"all\" == \"${name}\")\n  |> filter(fn: (r) => r[\"adapterName\"] =~ /${adapterName:regex}/ or \"all\" == \"${adapterName}\")\n  |> filter(fn: (r) => r[\"channelName\"] =~ /${channelName:regex}/ or \"all\" == \"${channelName}\")\n  |> filter(fn: (r) => r[\"deviceName\"] =~ /${deviceName:regex}/ or \"all\" == \"${deviceName}\")\n  |> filter(fn: (r) => r[\"role\"] =~ /${role:regex}/ or \"all\" == \"${role}\")\n  |> filter(fn: (r) => r[\"room\"] =~ /${room:regex}/ or \"all\" == \"${room}\")\n  |> filter(fn: (r) => r[\"function\"] =~ /${function:regex}/ or \"all\" == \"${function}\")\n  |> filter(fn: (r) => r[\"value_type\"] == \"number\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean)\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, name:r.name + \"  |  Room: \" + r.room + \"  |  Function: \" + r.function + \"  |  Unit: \" + r.unit}))\n  |> keep(columns:[\"name\", \"_value\", \"_time\"])",
          "refId": "A"
        }
      ],
      "title": "${function}",
      "transparent": true,
      "type": "timeseries"
    }
  ],
  "schemaVersion": 30,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"room\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Room",
        "multi": false,
        "name": "room",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"room\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"function\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Function",
        "multi": false,
        "name": "function",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"function\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"role\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Role",
        "multi": false,
        "name": "role",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"role\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"adapterName\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Adapter Name",
        "multi": false,
        "name": "adapterName",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"adapterName\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"channelName\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Channel Name",
        "multi": false,
        "name": "channelName",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"channelName\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"deviceName\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Device Name",
        "multi": false,
        "name": "deviceName",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"deviceName\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"name\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Name",
        "multi": false,
        "name": "name",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"name\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "all",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"id\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "ID",
        "multi": true,
        "name": "id",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: \"iobroker_labels_per_stateID\",\n  tag: \"id\",\n  predicate: (r) => true,\n  start: -40y\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "All Sensors",
  "uid": "-LBOtwNnk",
  "version": 58
}