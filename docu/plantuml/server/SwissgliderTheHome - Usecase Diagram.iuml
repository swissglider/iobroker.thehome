@startuml
!theme cyborg-outline

title
    SwissgliderTheHome Adapter - Usecase Diagram
end title

actor client << Browser >>
rectangle admin {
    actor adminSendTo << AdminAction >> #pink;line:red;line.bold;text:red
}

rectangle adapter {
    rectangle "configAdapter" {
        usecase ConfigDownloader as "=Download StatesConfigFile"
            note top
                Lädt die Configuration in einem 
                yaml/json file runter. 
                Für alle States welche einem 
                Room oder/und Function Enum zugewiesen sind
                werden folgende Parameter geschrieben:
                ..
                * State Name
                * Room Enum (löschen und neu setzen)
                * Function Enum (löschen und neu setzen)
                * store2DB state (native/swissglider/theHome/store2DB)
            end note
        usecase SingleUploader as "=Upload SingleStateConfig"
            note top
                Lädt die einzelne Configuration, 
                welche im Admin Interface eingegeben wird 
                hoch und ändert den
                entsprechenden State mit den folgenden
                Parameter:
                ..
                * State Name
                * Room Enum (löschen und neu setzen)
                * Function Enum (löschen und neu setzen)
                * store2DB state (native/swissglider/theHome/store2DB)
            end note
        usecase ConfigUploader as "=Upload StatesConfigFile"
            note top
                Lädt die Configuration in einem 
                yaml/json file hoch und ändert die
                entsprechenden States mit den folgenden
                Parameter:
                ..
                * State Name
                * Room Enum (löschen und neu setzen)
                * Function Enum (löschen und neu setzen)
                * store2DB state (native/swissglider/theHome/store2DB)
            end note
    }

    rectangle "configChangeListener" {
        actor ConfigChangeListener << Listener >> #F7B4C8
        usecase ConfigChangePreWorker as "=Listen to Config changes" #F7B4C8
            note top
                Wenn ein Object welches für die DB markiert ist geändert wird,
                wird auch entsprechend der InfluxDB entry angepasst, z.B.:
                * angelegt
                * gelöscht
                * Name angepasst
                ..
                Wenn ein Name eines Status in Scope geändert wird, 
                wird auch entsprechend InfluxDB entries dem Namen
                angepasst.
            end note
    }

    rectangle "influxDBAdapter" {
        usecase InfluxDBConverter as "=InfluxDBHandler Adapter" #F7B4C8
            note top
                Tags werden in nach InfluxdDB 
                Bucket iobroker_labels_per_stateID geschrieben,
                
                so können diese anhand der ID mit den measurements 
                zusammen gefügt werden
            end note
    }

    rectangle "batteryChecker & connectionChecker" {
        actor FrequenceBatteryChecker << Timer >> #F7B4C8
        actor FrequenceConnectionChecker << Timer >> #F7B4C8
        usecase BatteryChecker as "=Check Battery" #F7B4C8
            note top
                Schreibt ein State mit allen Battery Staties
                und gibt dies als JSON auch zurück
                Berücksichtigt werden alle Stati mit einem
                Battery value
            end note
        usecase ConnectionChecker as "=Check Device Connections" #F7B4C8
            note top 
                Alle Stati welche ein Room und/oder Function Enum
                haben werden geprüft, wann es das letzte mal
                erreichbar war und schreibt das Resultat in
                einen Status als JSON, dieser wird auch zurück
                gegeben
            end note
    }
}
rectangle adapter1 as "Adapter function zu Prüfen" #F7B4C8 {
    usecase SwissgliderGeneralParameterGenerator as "=Generate Swissglider General Parameters"
        note bottom
            Ruft SwissgliderGeneralParameterCleaner auf
            und schreibt danach bei allen Stati welche ein 
            Room und/oder Function Enum haben, die
            native/swissglider/general
            Parameter:
            ..
            * channelName
            * deviceName
            * adaptername
            * instanceName
            * instanceNumber
            * id
            * stateName
        end note
    usecase SwissgliderGeneralParameterCleaner as "=Clean all Swissglider General Parameters"
        note bottom
            löscht von allen Stati die 
            native/swissglider/general
            Parameters
        end note
}

left to right direction
client -left..> adminSendTo
adminSendTo -up-> ConfigUploader
adminSendTo -up-> SingleUploader
adminSendTo -up-> ConfigDownloader
adminSendTo -up-> ConfigChangeListener  #F7B4C8
adminSendTo -up-> FrequenceBatteryChecker  #F7B4C8
adminSendTo -up-> FrequenceConnectionChecker  #F7B4C8
adminSendTo -up-> InfluxDBConverter  #F7B4C8
adminSendTo -down-> SwissgliderGeneralParameterGenerator  #F7B4C8
adminSendTo -down-> SwissgliderGeneralParameterCleaner  #F7B4C8
SwissgliderGeneralParameterGenerator -> SwissgliderGeneralParameterCleaner  #F7B4C8

FrequenceBatteryChecker -left-> BatteryChecker  #F7B4C8
FrequenceConnectionChecker -left-> ConnectionChecker  #F7B4C8
ConfigChangeListener -left-> ConfigChangePreWorker  #F7B4C8

ConfigChangePreWorker -> InfluxDBConverter  #F7B4C8

@enduml